
(in-package #:wordnet-dsl)

(add-namespace "schema" "https://br.ibm.com/tkb/own-en/schema/")
(add-namespace "nomlex" "https://br.ibm.com/tkb/own-en/nomlex/")

(defparameter *pos-types* '(("noun" . !schema:NounSynset)
                            ("adj" . !schema:AdjectiveSynset)
                            ("adjs" . !schema:AdjectiveSatelliteSynset)
                            ("adv" . !schema:AdverbSynset)
                            ("verb" . !schema:VerbSynset)))

(defparameter *pointers* '(("ant" . !schema:antonymOf)
                           ("dr" . !schema:classifiedByRegion)
                           ("ihyper" . !schema:instanceOf)
                           ("hyper" . !schema:hyponymOf)
                           ("ant" . !schema:antonymOf)
                           ("attr" . !schema:attribute)
                           ("cause" . !schema:causes)
                           ("da" . !schema:adverbPertainsTo)
                           ("drf" . !schema:derivationallyRelated)
                           ("dt" . !schema:classifiedByTopic)
                           ("du" . !schema:classifiedByUsage)
                           ("entail" . !schema:entails)
                           ("frame" . !schema:frame)
                           ("hm" . !schema:memberHolonymOf)
                           ("hp" . !schema:partHolonymOf)
                           ("hs" . !schema:substanceHolonymOf)
                           ("pe" .  !schema:adjectivePertainsTo)
                           ("pv" . !schema:participleOf)
                           ("see" . !schema:seeAlso)
                           ("sim" . !schema:similarTo)
                           ("vg" . !schema:sameVerbGroupAs)
                           ("agent" . !nomlex:agent)
                           ("body-part" . !nomlex:bodyPart)
                           ("by-means-of" . !nomlex:byMeansOf)
                           ("destination" . !nomlex:destination)
                           ("event" . !nomlex:event)
                           ("instrument" . !nomlex:instrument)
                           ("location" . !nomlex:location)
                           ("material" . !nomlex:material)
                           ("property" . !nomlex:property)
                           ("result" . !nomlex:result)
                           ("state" . !nomlex:state)
                           ("undergoer" . !nomlex:undergoer)
                           ("uses" . !nomlex:uses)
                           ("vehicle" . !nomlex:vehicle)))

(defun escape-iri (str)
  (substitute #\_ #\" (substitute #\- #\: str)))

(defun make-synset-iri (synset-id)
  (node (format nil "https://br.ibm.com/tkb/own-en/instances/synset/~a" (escape-iri synset-id))))

(defun make-synset-type (synset)
  (cdr (assoc (first (split-sequence #\. (synset-file synset))) *pos-types* :test #'equal)))

(defun make-pointer (pointer)
  (cdr (assoc pointer *pointers* :test #'equal)))

(defun export-synset (synset-id synset)
  (let ((synset-iri (make-synset-iri synset-id))
        (synset-type (make-synset-type synset)))
    (wilbur:add-triple (wilbur:triple synset-iri !rdf:type synset-type))
    (wilbur:add-triple (wilbur:triple synset-iri !schema:lexicographerFile (literal (synset-file synset))))
    (when (synset-gloss synset)
      (wilbur:add-triple (wilbur:triple synset-iri !schema:gloss (literal (synset-gloss synset)))))
    (dolist (p (remove-if-not (lambda (x) (equal 0 x)) (synset-pointers synset) :key #'car))
      (wilbur:add-triple (wilbur:triple synset-iri (make-pointer (second p)) (make-synset-iri (third p)))))))

(defun default-sense (synset)
  (caar (reverse (synset-senses synset))))

(defun export-synsets (wn)
  (dolist (s (remove-duplicates (mapcar #'car (hash-table-values wn))))
    (export-synset (default-sense s) s)))

(defun export-rdf ()
  (let ((*db* (make-instance 'wilbur::fast-temporary-db))
        (wn (read-wn #p"../dict/*.txt")))
    (export-synsets wn)
    (with-open-file (stream "out.nt" :direction :output :if-exists :supersede)
      (wilbur::dump-as-ntriples (db-triples *db*) stream))))
