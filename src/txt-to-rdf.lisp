(in-package :cl-wn-org)

(defun txt->rdf (wn new-file)
  (with-open-file (stream new-file :direction :output :if-exists :supersede   :if-does-not-exist :create)
    (let ((hash-words (make-hash-table :test #'equal)))
      (maphash #'(lambda (file-name synsets) (synsets->rdf stream file-name synsets hash-words)) wn)
      (maphash #'(lambda (word uri-word) (instance-word stream word uri-word)) hash-words))))


(defun synsets->rdf (stream file-name synsets hash-words)
  (maphash #'(lambda (synset-id synset-obj)
	       (if (not (listp synset-obj))
		   (synset->rdf stream file-name synset-id synset-obj hash-words)))
	   synsets))


(defun synset->rdf (stream file-name synset-id synset-obj hash-words)
  (let ((synset-uri (make-uri "synset" file-name synset-id))
	(senses (synset-senses synset-obj)))
    (add-synset-type stream synset-uri file-name)
    (add-synset-props stream (symbol-name file-name) synset-uri synset-obj)
    (add-gloss stream synset-uri (synset-gloss synset-obj))
    (loop for sense in senses do
	  (add-wordsenses stream synset-uri file-name sense hash-words))))


(defun add-gloss (stream synset-uri gloss)
  (format stream "~a <https://w3id.org/own-pt/wn30/schema/gloss> ~s .~%" synset-uri gloss))


(defun make-uri (type file-name synset-id)
  (cond ((cl-ppcre:scan ":" synset-id)
	  (let ((file (aref (nth 1 (multiple-value-list (cl-ppcre:scan-to-strings  "(.*):" synset-id))) 0))
		(id (aref (nth 1 (multiple-value-list (cl-ppcre:scan-to-strings  ":(.*)" synset-id))) 0)))
	    (format nil "<https://w3id.org/own-pt/wn30-en/instances/~a-~a-~a>" type file id)))
	(t
	 (let ((file (aref (nth 1 (multiple-value-list (cl-ppcre:scan-to-strings "(.*).txt" (string-downcase file-name)))) 0)))
	    (format nil "<https://w3id.org/own-pt/wn30-en/instances/~a-~a-~a>" type file synset-id)))))


(defun add-synset-type (stream synset file-name)
  (let ((file (string-upcase (symbol-name file-name))))
    (cond ((cl-ppcre:scan "NOUN" file) (add-type stream synset "NounSynset"))
	  ((cl-ppcre:scan "ADJ" file)  (add-type stream synset "AdjectiveSynset"))
	  ((cl-ppcre:scan "ADV" file)  (add-type stream synset "AdverbSynset"))
	  ((cl-ppcre:scan "VERB" file) (add-type stream synset "VerbSynset")))))


(defun add-wordsenses (stream synset file-name sense hash-words)
  (let* ((word (sense-id sense))
	 (uri-sense (make-uri "wordsense" file-name word)))
    (format stream "~a <https://w3id.org/own-pt/wn30/schema/containsWordSense> ~a .~%" synset uri-sense)
    (add-wordsense-props stream (symbol-name file-name) uri-sense sense)
    (add-word stream  uri-sense sense hash-words)
    (add-type stream uri-sense "WordSense")))


(defun add-word (stream  uri-sense sense-obj hash-words)
  (let* ((word (sense-word sense-obj))
	 (uri-word (format nil "<https://w3id.org/own-pt/wn30-en/instances/word-~a>" word)))
    (setf (gethash word hash-words) uri-word)
    (format stream "~a  <https://w3id.org/own-pt/wn30/schema/word> ~a .~%" uri-sense uri-word)))


(defun instance-word (stream word uri-word)
  (add-type stream uri-word "Word")
  (add-lexicalform stream uri-word word))


(defun add-lexicalform (stream uri-word word)
  (let ((lexicalform  (clean-word word)))
    (format stream "~a <https://w3id.org/own-pt/wn30/schema/lexicalForm> \"~a\" .~%" uri-word lexicalform)))


(defun clean-word (word)
  (substitute #\space #\_ word))


(defun add-wordsense-props (stream file-name uri-sense sense-obj)
  (let ((pointers (cdr (assoc file-name  *pointers* :test #'(lambda (x y) (cl-ppcre:scan (string-upcase y) (string-upcase x)))))))
    (add-prop stream uri-sense (sense-links-targets sense-obj) pointers file-name "wordsense")))


(defun add-synset-props (stream file-name synset synset-obj)
  (let ((pointers (cdr (assoc file-name  *pointers* :test #'(lambda (x y) (cl-ppcre:scan (string-upcase y) (string-upcase x)))))))
    (add-prop stream synset (synset-pointers synset-obj) pointers file-name "synset")))


(defun add-prop (stream synset slot-pointers pointers file-name type)
  (when (not (null  slot-pointers))
    (if (cl-ppcre:scan (car slot-pointers) "frame|frame:")
	(progn (add-prop-frame stream synset (cadr slot-pointers))
	       (add-prop stream synset (cddr slot-pointers) pointers file-name type))
	(let ((target (make-uri type file-name (cadr slot-pointers))))
	  (format stream "~a ~a ~a . ~%"
		  synset
		  (cdr (assoc (car slot-pointers) pointers :test #'(lambda (x y) (cl-ppcre:scan y x))))
		  target)
	  (add-prop stream synset (cddr slot-pointers) pointers file-name type)))))

(defun add-prop-frame (stream synset brick-frame)
  (let ((frames (cl-ppcre:split #\- brick-frame)))
    (loop for frame in frames do
	  (format stream "~a ~a ~s . ~%"
		  synset
		  "<https://w3id.org/own-pt/wn30/schema/frame>"
		  (cdr (assoc  frame *frames* :test #'(lambda (x y) (cl-ppcre:scan y x))))))))


(defun add-type (stream synset type)
  (format stream "~a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <https://w3id.org/own-pt/wn30/schema/~a> .~%" synset type))


(defparameter *pointers* '(("NOUN" . (("ant" . "<https://w3id.org/own-pt/wn30/schema/antonymOf>")
				      ("^hyper$|^hyper:$" . "<https://w3id.org/own-pt/wn30/schema/hypernymOf>")
				      ("ihyper" . "<https://w3id.org/own-pt/wn30/schema/instanceOf>")
				      ("hypo" . "<https://w3id.org/own-pt/wn30/schema/hyponymOf>")
				      ("hm" . "<https://w3id.org/own-pt/wn30/schema/memberHolonymOf>")
				      ("hs" . "<https://w3id.org/own-pt/wn30/schema/substanceHolonymOf>")
				      ("hp" . "<https://w3id.org/own-pt/wn30/schema/partHolonymOf>")
				      ("mm" . "<https://w3id.org/own-pt/wn30/schema/memberMeronymOf>")
				      ("ms" . "<https://w3id.org/own-pt/wn30/schema/substanceHolonymOf>")
				      ("mp" . "<https://w3id.org/own-pt/wn30/schema/partMeronymOf>")
				      ("attr" . "<https://w3id.org/own-pt/wn30/schema/attribute>")
				      ("drf" . "<https://w3id.org/own-pt/wn30/schema/derivationallyRelated>")
				      ("dt" . "<https://w3id.org/own-pt/wn30/schema/classifiedByTopic>")
				      ("^dr$|^dr:$" . "<https://w3id.org/own-pt/wn30/schema/classifiedByRegion>")
				      ("du" . "<https://w3id.org/own-pt/wn30/schema/classifiedByUsage>")))
			   ("VERB" . (("ant" . "<https://w3id.org/own-pt/wn30/schema/antonymOf>")
				      ("hyper" . "<https://w3id.org/own-pt/wn30/schema/hypernymOf>")
				      ("hypo" . "<https://w3id.org/own-pt/wn30/schema/hyponymOf>")
				      ("entail" . "<https://w3id.org/own-pt/wn30/schema/entails>")
				      ("cause" . "<https://w3id.org/own-pt/wn30/schema/causes>")
				      ("see" . "<https://w3id.org/own-pt/wn30/schema/seeAlso>")
				      ("vg" . "<tps://w3id.org/own-pt/wn30/schema/sameVerbGroupAs>")
				      ("drf" . "<https://w3id.org/own-pt/wn30/schema/derivationallyRelated>")
				      ("dt" . "<https://w3id.org/own-pt/wn30/schema/classifiedByTopic>")
				      ("^dr$|^dr:$" . "<https://w3id.org/own-pt/wn30/schema/classifiedByRegion>")
				      ("du" . "<https://w3id.org/own-pt/wn30/schema/classifiedByUsage>")
				      ("frame" . "<https://w3id.org/own-pt/wn30/schema/frame>")
				      ("agent" . "<https://w3id.org/own-pt/nomlex/schema/agent>")
				      ("body-part" . "<https://w3id.org/own-pt/nomlex/schema/bodyPart>")
				      ("by-means-of" . "<https://w3id.org/own-pt/nomlex/schema/byMeansOf>")
				      ("destination" . "<https://w3id.org/own-pt/nomlex/schema/destination>")
				      ("event" . "<https://w3id.org/own-pt/nomlex/schema/event>")
				      ("instrument" . "<https://w3id.org/own-pt/nomlex/schema/instrument>")
				      ("location" . "<https://w3id.org/own-pt/nomlex/schema/location>")
				      ("material" . "<https://w3id.org/own-pt/nomlex/schema/material>")
				      ("property" . "<https://w3id.org/own-pt/nomlex/schema/property>")
				      ("result" . "<https://w3id.org/own-pt/nomlex/schema/result>")
				      ("state" . "<https://w3id.org/own-pt/nomlex/schema/state>")
				      ("undergoer" . "<https://w3id.org/own-pt/nomlex/schema/undergoer>")
				      ("uses" . "<https://w3id.org/own-pt/nomlex/schema/usesh>")
				      ("vehicle" . "<https://w3id.org/own-pt/nomlex/schema/vehicle>")))
			   ("ADJ." . (("ant" . "<https://w3id.org/own-pt/wn30/schema/antonymOf>")
				      ("sim" . "<https://w3id.org/own-pt/wn30/schema/similarTo>")
				      ("pv" . "<https://w3id.org/own-pt/wn30/schema/participleOf>")
				      ("pe" .  "<https://w3id.org/own-pt/wn30/schema/adjectivePertainsTo>")
				      ("attr" . "<https://w3id.org/own-pt/wn30/schema/attribute>")
				      ("see:" . "<https://w3id.org/own-pt/wn30/schema/seeAlso>")
				      ("drf" . "<https://w3id.org/own-pt/wn30/schema/derivationallyRelated>")
				      ("dt" . "<https://w3id.org/own-pt/wn30/schema/classifiedByTopic>")
				      ("^dr$|^dr:$" . "<https://w3id.org/own-pt/wn30/schema/classifiedByRegion>")
				      ("du" . "<https://w3id.org/own-pt/wn30/schema/classifiedByUsage>")
				      ("agent" . "<https://w3id.org/own-pt/nomlex/schema/agent>")
				      ("body-part" . "<https://w3id.org/own-pt/nomlex/schema/bodyPart>")
				      ("by-means-of" . "<https://w3id.org/own-pt/nomlex/schema/byMeansOf>")
				      ("destination" . "<https://w3id.org/own-pt/nomlex/schema/destination>")
				      ("event" . "<https://w3id.org/own-pt/nomlex/schema/event>")
				      ("instrument" . "<https://w3id.org/own-pt/nomlex/schema/instrument>")
				      ("location" . "<https://w3id.org/own-pt/nomlex/schema/location>")
				      ("material" . "<https://w3id.org/own-pt/nomlex/schema/material>")
				      ("property" . "<https://w3id.org/own-pt/nomlex/schema/property>")
				      ("result" . "<https://w3id.org/own-pt/nomlex/schema/result>")
				      ("state" . "<https://w3id.org/own-pt/nomlex/schema/state>")
				      ("undergoer" . "<https://w3id.org/own-pt/nomlex/schema/undergoer>")
				      ("uses" . "<https://w3id.org/own-pt/nomlex/schema/usesh>")
				      ("vehicle" . "<https://w3id.org/own-pt/nomlex/schema/vehicle>")))
			   ("ADJS" . (("ant" . "<https://w3id.org/own-pt/wn30/schema/antonymOf>")
				      ("sim" . "<https://w3id.org/own-pt/wn30/schema/similarTo>")
				      ("pv" . "<https://w3id.org/own-pt/wn30/schema/participleOf>")
				      ("pe" .  "<https://w3id.org/own-pt/wn30/schema/adjectivePertainsTo>")
				      ("attr" . "<https://w3id.org/own-pt/wn30/schema/attribute>")
				      ("see" . "<https://w3id.org/own-pt/wn30/schema/seeAlso>")
				      ("drf" . "<https://w3id.org/own-pt/wn30/schema/derivationallyRelated>")
				      ("dt" . "<https://w3id.org/own-pt/wn30/schema/classifiedByTopic>")
				      ("^dr$|^dr:$" . "<https://w3id.org/own-pt/wn30/schema/classifiedByRegion>")
				      ("du" . "<https://w3id.org/own-pt/wn30/schema/classifiedByUsage>")))
			   ("ADV" . (("ant" . "<https://w3id.org/own-pt/wn30/schema/antonymOf>")
				     ("da" . "<https://w3id.org/own-pt/wn30/schema/adverbPertainsTo>")
				     ("dt" . "<https://w3id.org/own-pt/wn30/schema/classifiedByTopic>")
				     ("^dr$|^dr:$" . "<https://w3id.org/own-pt/wn30/schema/classifiedByRegion>")
				     ("du" . "<https://w3id.org/own-pt/wn30/schema/classifiedByUsage>")))))


(defparameter *frames* '(("^1$"  .  "Something ----s") 
			 ("^2$"  . "Somebody ----s") 
			 ("^3$"  . "It is ----ing") 
			 ("^4$"  . "Something is ----ing PP") 
			 ("^5$"  . "Something ----s something Adjective/Noun") 
			 ("^6$"  . "Something ----s Adjective/Noun") 
			 ("^7$"  . "Somebody ----s Adjective") 
			 ("^8$"  . "Somebody ----s something") 
			 ("^9$"  . "Somebody ----s somebody") 
			 ("10"  . "Something ----s somebody") 
			 ("11"  . "Something ----s something") 
			 ("12"  . "Something 1----s to somebody") 
			 ("13"  . "Somebody ----s on something") 
			 ("14"  . "Somebody ----s somebody something") 
			 ("15"  . "Somebody ----s something to somebody") 
			 ("16"  . "Somebody ----s something from somebody") 
			 ("17"  . "Somebody ----s somebody with something") 
			 ("18"  . "Somebody ----s somebody of something") 
			 ("19"  . "Somebody ----s something on somebody") 
			 ("20"  . "Somebody ----s somebody PP") 
			 ("21"  . "Somebody ----s something PP") 
			 ("22"  . "Somebody ----s PP") 
			 ("23"  ."Somebody's (body part) ----s") 
			 ("24"  .  "Somebody ----s somebody to INFINITIVE") 
			 ("25"  . "Somebody ----s somebody INFINITIVE") 
			 ("26"  . "Somebody ----s that CLAUSE") 
			 ("27"  . "Somebody ----s to somebody") 
			 ("28"  . "Somebody ----s to INFINITIVE") 
			 ("29"  . "Somebody ----s whether INFINITIVE") 
			 ("30"  . "Somebody ----s somebody into V-ing something") 
			 ("31"  . "Somebody ----s something with something") 
			 ("32"  . "Somebody ----s INFINITIVE") 
			 ("33"  . "Somebody ----s VERB-ing") 
			 ("34"  . "It ----s that CLAUSE") 
			 ("35"  .  "Something ----s INFINITIVE")))
